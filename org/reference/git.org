:PROPERTIES:
:ID:       a731b432-3ed7-428a-b3bb-78d3eefc217e
:END:
#+title: Git

* Links
** TODO [[https://www.sbf5.com/~cduan/technical/git/][Understanding Git Conceptually]]
** TODO [[https://github.com/pluralsight/git-internals-pdf][GitHub - pluralsight/git-internals-pdf: PDF on Git Internals]]

* Git Internals
** Content of .git folder
Git stores snapshots (exact content of the files) at the point of a commit.
#+begin_src sh
ls .git
#+end_src

#+results:
| COMMIT_EDITMSG |
| config        |
| description   |
| FETCH_HEAD     |
| HEAD          |
| hooks         |
| index         |
| info          |
| logs          |
| objects       |
| ORIG_HEAD      |
| packed-refs   |
| refs          |

The content is stored in the objects sub-directory. There are 4 kinds
of objects:

- blob :: used for storing the contents of a single file
- tree :: contains references to other blobs or subtrees
- commit :: contains reference to another tree object and some other
            information (author, committer etc.)
- tag :: Another reference to a commit object

* Git Branching Models
[[https://nvie.com/posts/a-successful-git-branching-model/][A successful Git branching model Â» nvie.com]]

* VFS for Git
:PROPERTIES:
:ID:       0fb958db-0f41-4cff-a621-704db9ad269e
:END:
VFS for Git is a virtualized filesystem used to bypass assumptions
about repository size, allowing Git repositories to scale up to large
repositories.

With GVFS, an initial clone downloads a set of pack-files containing
only commits and trees. These objects are sufficient for generating a
view of the working directory, and examining the commit history with
git log.

GVFS allows dynamically downloading objects as needed.
